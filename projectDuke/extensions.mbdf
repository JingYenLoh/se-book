## Extensions: Category A


<div id="A-Classes">

### <span class="badge badge-pill badge-info">A-Classes</span>
{{ indented_arrow | safe }} **Use a class to represent tasks**

While it is possible to represent a task list as a multi-dimensional array containing <tooltip content="`String`, `int`, `boolean` etc.">primitive values</tooltip>, the more natural approach is to use a `Task` class to represent tasks.

```java
public class Task {
    protected String description;
    protected boolean isDone;

    public Task(String description) {
        this.description = description;
        this.isDone = false;
    }

    public String getStatus() {
        return (isDone ? "✓" : "✗");
    }

    //...
}
```

```java
Task t = new Taks("read book");
t.markAsDone()
```

</div><hr>
<div id="A-Inheritance">

### <span class="badge badge-pill badge-info">A-Inheritance</span>
{{ indented_arrow | safe }} **Use Inheritance to support multiple task types**

As there are multiple types of tasks that have some similarity between them, you can implement classes `Todo`, `Deadline` and `Event` classes to inherit from a `Task` class.

Furthermore, use polymorphism to store all tasks in a data structure containing `Task` objects e.g., `Task[100]`.

</div><hr>

<div id="A-Exceptions">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Exceptions"
         var-extHeading="Use Exceptions to handle errors"/>

Use exceptions to handle errors. For example, define a class `DukeException` to represent exceptions specific to Duke.

</div><hr>

<div id="A-TextUiTesting">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-TextUiTesting"
         var-extHeading="Test using the I/O redirection technique"/>

Use the input/output redirection technique to semi-automate testing of Duke.
</div><hr>
<div id="A-Collections">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Collections"
         var-extHeading="Use Java Collections classes"/>

Use Java Collections classes for storing data. For example, you can use an `ArrayList<Task>` to store the tasks.
</div><hr>
<div id="A-OOP">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-OOP"
         var-extHeading="Make the code more OOP"/>

Refactor the code to extract out closely related code as classes.
* **(a) Extract `Ui`, `Storage`, `TaskList`, etc.**
* **(b) Extract `*Command` classes**
</div><hr>
<div id="A-JUnit">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-JUnit"
         var-extHeading="Add JUnit tests"/>

Add JUnit tests to test the behavior of the code.

</div><hr>
<div id="A-Packages">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Packages"
         var-extHeading="Divide classes into packages"/>

Organize the classes into suitable java packages. e.g., `duke.task`, `duke.command`
</div><hr>
<div id="A-JavaDoc">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-JavaDoc"
         var-extHeading="Add JavaDoc comments"/>

Add JavaDoc comments to the code.
</div><hr>
<div id="A-CodingStandard">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-CodingStandard"
         var-extHeading="Tweak the code to comply with a coding standard"/>

Tweak the code to comply with a chosen coding standard.
</div><hr>
<div id="A-CodeQuality">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-CodeQuality"
         var-extHeading="Improve code quality"/>

Critically examines the code and refactor to improve the code quality where necessary.
</div><hr>
<div id="A-Assertions">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Assertions"
         var-extHeading="Use Assertions"/>

Use `assert` feature (not JUnit assertions) to document important assumptions that should hold at various points in the code.
</div><hr>
<div id="A-Jar">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Jar"
         var-extHeading="Package the App as a JAR file"/>

Package the app as an executable JAR file so that it can be distributed easily.
</div><hr>
<div id="A-Gradle">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Gradle"
         var-extHeading="Automate project builds using Gradle"/>

Use Gradle to automate some of the build tasks of the project. 
</div><hr>
<div id="A-Travis">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Travis"
         var-extHeading="Use Travis for CI"/>

Use Travis (and GitHub) to perform Continuous Integration (CI).
</div><hr>
<div id="A-Enums">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Enums"
         var-extHeading="Use Enumerations"/>

Use Java `enum`s, if applicable.
</div><hr>
<div id="A-Varargs">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Varargs"
         var-extHeading="Use var-args"/>

Use Java varargs feature, if applicable.
</div><hr>
<div id="A-Lambdas">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Lambdas"
         var-extHeading="Use Lambdas"/>

Use the Lambdas feature of Java in your code, if applicable.
</div><hr>
<div id="A-Streams">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Streams"
         var-extHeading="Use Streams"/>

Use the Streams feature of Java in your code, if applicable.
</div><hr>
<div id="A-Libraries">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-Libraries"
         var-extHeading="Use external libraries"/>

Use third-party libraries in your project. For example, you can use the Natty library to parse strings into meaningful dates.
</div><hr>
<div id="A-JavaFx">
<include boilerplate src="dukeExtensionTitle.md" var-extId="A-JavaFx"
         var-extHeading="use JavaFX"/>

Use JavaFX to create a GUI.
</div>

## Extensions: Category B

## Extensions: Category C

## Extensions: Category D